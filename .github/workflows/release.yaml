name: Release

on:
  push:
    tags:
      - v*
    branches:
      - master
      - release-*
      - dev-*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  contents: read

env:
  OCI_REGISTRY: quay.io
  OCI_REGISTRY_REPO: ${{ vars.QUAYIO_ORG }}
  OCI_REGISTRY_USERNAME: ${{ secrets.QUAYIO_USERNAME }}
  OCI_REGISTRY_PASSWORD: ${{ secrets.QUAYIO_PASSWORD }}

jobs:
  build-linux-amd64:
    name: Build & push linux/amd64
    # if: github.repository == 'codefresh-io/argo-workflows'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ linux/amd64 ]
        target: [ workflow-controller, argocli, argoexec ]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1

      - name: Cache Docker layers
        uses: actions/cache@v3
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.platform }}-${{ matrix.target }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform }}-${{ matrix.target }}-buildx-

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.OCI_REGISTRY }}
          username: ${{ env.OCI_REGISTRY_USERNAME }}
          password: ${{ env.OCI_REGISTRY_PASSWORD }}

      - name: Docker Buildx
        env:
          PLATFORM: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
        run: |
          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          tag_suffix=$(echo $PLATFORM | sed -r "s/\//-/g")
          image_name="${{ env.OCI_REGISTRY }}/${{ env.OCI_REGISTRY_REPO }}/${TARGET}:${tag}-${tag_suffix}"
          image_name="${image_name#/}" # remove leading slash if OCI_REGISTRY is empty

          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform="${PLATFORM}" \
            --target $TARGET \
            --tag $image_name .

  build-linux-arm64:
    name: Build & push linux/arm64
    #if: github.repository == 'codefresh-io/argo-workflows'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ linux/arm64 ]
        target: [ workflow-controller, argocli, argoexec ]
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1

      - name: Cache Docker layers
        uses: actions/cache@v3
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.platform }}-${{ matrix.target }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform }}-${{ matrix.target }}-buildx-

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.OCI_REGISTRY }}
          username: ${{ env.OCI_REGISTRY_USERNAME }}
          password: ${{ env.OCI_REGISTRY_PASSWORD }}

      - name: Docker Buildx
        env:
          PLATFORM: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
        run: |
          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          tag_suffix=$(echo $PLATFORM | sed -r "s/\//-/g")
          image_name="${{ env.OCI_REGISTRY }}/${{ env.OCI_REGISTRY_REPO }}/${TARGET}:${tag}-${tag_suffix}"
          image_name="${image_name#/}" # remove leading slash if OCI_REGISTRY is empty

          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform="${PLATFORM}" \
            --target $TARGET \
            --tag $image_name .

  build-windows:
    name: Build & push windows
    #if: github.repository == 'codefresh-io/argo-workflows'
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v2

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.OCI_REGISTRY }}
          username: ${{ env.OCI_REGISTRY_USERNAME }}
          password: ${{ env.OCI_REGISTRY_PASSWORD }}

      - name: Build & Push Windows Docker Images
        run: |
          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          targets="argoexec"
          for target in $targets; do
            image_name="${{ env.OCI_REGISTRY }}/${{ env.OCI_REGISTRY_REPO }}/${target}:${tag}-windows"
            image_name="${image_name#/}" # remove leading slash if OCI_REGISTRY is empty

            docker build --target $target -t $image_name -f Dockerfile.windows .
            docker push $image_name
          done

  push-images:
    name: Push manifest with all images
    #if: github.repository == 'codefresh-io/argo-workflows'
    runs-on: ubuntu-latest
    needs: [ build-linux-amd64, build-linux-arm64, build-windows ]
    permissions:
      contents: read
      id-token: write # Needed to create an OIDC token for keyless signing
    steps:
      - uses: actions/checkout@v2

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.OCI_REGISTRY }}
          username: ${{ env.OCI_REGISTRY_USERNAME }}
          password: ${{ env.OCI_REGISTRY_PASSWORD }}

      - name: Install cosign
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 # v3.1.1
        with:
          cosign-release: 'v2.1.1'

      - name: Push Multiarch Image
        run: |
          echo $(jq -c '. + { "experimental": "enabled" }' ${HOME}/.docker/config.json) > ${HOME}/.docker/config.json

          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          targets="workflow-controller argoexec argocli"
          for target in $targets; do
            image_name="${{ env.OCI_REGISTRY }}/${{ env.OCI_REGISTRY_REPO }}/${target}:${tag}"
            image_name="${image_name#/}" # remove leading slash if OCI_REGISTRY is empty

            if [ $target = "argoexec" ]; then
              docker manifest create $image_name ${image_name}-linux-arm64 ${image_name}-linux-amd64 ${image_name}-windows
            else
              docker manifest create $image_name ${image_name}-linux-arm64 ${image_name}-linux-amd64
            fi

            docker manifest push $image_name

            repo="${{ env.OCI_REGISTRY }}/${{ env.OCI_REGISTRY_REPO }}"
            repo="${repo#/}" # remove leading slash if OCI_REGISTRY is empty
            digest=$(skopeo inspect docker://$image_name | jq -r '.Digest')
            cosign sign \
            -a "repo=${{ github.repository }}" \
            -a "workflow=${{ github.workflow }}" \
            -a "sha=${{ github.sha }}" \
            -y \
            "${repo}/${target}@${digest}"
          done

  test-images-linux-amd64:
    name: Try pulling linux/amd64
    #if: github.repository == 'codefresh-io/argo-workflows'
    runs-on: ubuntu-latest
    needs: [ push-images ]
    strategy:
      matrix:
        platform: [ linux/amd64 ]
        target: [ workflow-controller, argocli, argoexec ]
    steps:
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.OCI_REGISTRY }}
          username: ${{ env.OCI_REGISTRY_USERNAME }}
          password: ${{ env.OCI_REGISTRY_PASSWORD }}

      - name: Docker Buildx
        env:
          PLATFORM: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
        run: |
          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          image_name="${{ env.OCI_REGISTRY }}/${{ env.OCI_REGISTRY_REPO }}/${TARGET}:${tag}"
          image_name="${image_name#/}" # remove leading slash if OCI_REGISTRY is empty
          docker pull $image_name

  test-images-windows:
    name: Try pulling windows
    #if: github.repository == 'codefresh-io/argo-workflows'
    runs-on: windows-2022
    needs: [ push-images ]
    steps:

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.OCI_REGISTRY }}
          username: ${{ env.OCI_REGISTRY_USERNAME }}
          password: ${{ env.OCI_REGISTRY_PASSWORD }}

      - name: Try pulling
        env:
          DOCKERIO_ORG: ${{ secrets.DOCKERIO_ORG }}
        run: |
          docker_org=$DOCKERIO_ORG
          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          targets="argoexec"
          for target in $targets; do
            image_name="${{ env.OCI_REGISTRY }}/${{ env.OCI_REGISTRY_REPO }}/${target}:${tag}"
            image_name="${image_name#/}" # remove leading slash if OCI_REGISTRY is empty
            docker pull $image_name
          done

  publish-release:
    permissions:
      contents: write  # for softprops/action-gh-release to create GitHub release
      id-token: write # Needed to create an OIDC token for keyless signing
    runs-on: ubuntu-latest
    #if: github.repository == 'codefresh-io/argo-workflows'
    needs: [ push-images, test-images-linux-amd64, test-images-windows ]
    env:
      NODE_OPTIONS: --max-old-space-size=4096
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
      - uses: actions/setup-go@v3
        with:
          go-version: "1.18"
      - uses: actions/cache@v3
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-dep-v1-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v3
        with:
          path: /home/runner/.cache/go-build
          key: GOCACHE-v2-${{ hashFiles('**/go.mod') }}
      - uses: actions/cache@v3
        with:
          path: /home/runner/go/pkg/mod
          key: GOMODCACHE-v2-${{ hashFiles('**/go.mod') }}
      - name: Install cosign
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 # v3.1.1
        with:
          cosign-release: 'v2.1.1'
      # https://stackoverflow.com/questions/58033366/how-to-get-current-branch-within-github-actions
      - run: make release-notes VERSION=${GITHUB_REF##*/}
      - run: cat release-notes
      - run: make manifests VERSION=${GITHUB_REF##*/}
      - name: Print image tag (please check it is not `:latest`)
        run: |
          grep image: dist/manifests/install.yaml
      - run: go mod download
      - run: make clis STATIC_FILES=true VERSION=${GITHUB_REF##*/}
      - name: Print version (please check it is not dirty)
        run: dist/argo-linux-amd64 version
      - run: make checksums
      - name: Sign checksums and create public key for release assets
        run: |
          cosign sign-blob -y ./dist/argo-workflows-cli-checksums.txt > ./dist/argo-workflows-cli-checksums.sig
      # https://github.com/softprops/action-gh-release
      # This will publish the release and upload assets.
      # If a conflict occurs (because you are not on a tag), the release will not be updated. This is a short coming
      # of this action.
      # Instead, delete the release so it is re-created.
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          prerelease: ${{ startsWith(github.ref, 'refs/tags/v0') || contains(github.ref, 'rc') }}
          body_path: release-notes
          files: |
            dist/argo-*.gz
            dist/argo-workflows-cli-checksums.txt
            dist/argo-workflows-cli-checksums.sig
            dist/manifests/*.yaml
            dist/sbom.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
